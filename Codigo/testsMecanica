#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 19 02:02:22 2019

@author: Javier Alejandro Acevedo Barroso
"""
from __future__ import division

import numpy as np
import matplotlib.pyplot as plt


#d1 = np.random.poisson(3,10000)
#d2 = np.random.poisson(3,10000)
#d3 = np.random.poisson(0,10000)
#
#plt.hist(d1,bins=10)
#plt.hist(d2-d1,bins=10)
#plt.hist(d3,bins=10)
#
#from scipy.stats import poisson
#
#heh = poisson.pmf(  1,3)
#print(heh, np.exp(-3)*3)
#
#
#def randomWalk(N,a,d):
#    rta = np.zeros(N) #Empieza en cero
#    for i in range(1,N):
#      rta[i] = rta[i-1]+np.random.uniform(d-a,d+a,1)
#    return rta
#
#
#veces = 10000
#m1 = 0
#m2 = 0
#N = 100
#a = 1
#d = 5
#desplazamientos = np.zeros(veces)
#
#for i in range(veces):
#    walk = randomWalk(N,a,d)
#    desplazamientos[i] = walk[-1]
#    
#print(desplazamientos.mean()/N, desplazamientos.std(), np.sqrt(N/3)*a,100*((np.sqrt(N/3)*a)-desplazamientos.std())/np.sqrt(N/3)*a)


#EcuaciÃ³n maestra punto 4.

nA = 1
nB = 0
nC = 0

r = 0.1
k1 = 0.5
k2 = 0.5
d = 0.2
t = 0
dt = 1e-3

dpA = 0
dpB = r*nA-k1*nB+k2*nC
dpC = k1*nB-d*nC-k2*nC

epsilon = 0.0001

while(dpB >epsilon or dpC > epsilon):
    nB += dpB*dt
    nC += dpC*dt
    dpB = r*nA-k1*nB+k2*nC
    dpC = k1*nB-d*nC-k2*nC
    t+=dt
    print(nA,nB,nC,nA+nB+nC)

print(nA/nC,d/r,nB/nA,(1+k2/d)*r/k1,"tiempo=",t)
#print("el <B> es: {}".format(nB/t))

promed = nA*(1+r/k1+k2/k1*r/d+r/d)/3
#sigma = nA**2*()

print((nA+nB+nC)/3)
sat = nA+nB*r/k1*(k2/d+1)+r/d*nC
norm = 1+(1+k2/d)+r/k1 + r/d
print(promed)    
    
    
    
    
    
    
#Punto 5
#def dp(p,a=1,b=1,k=1,gamma=0.5):
#    return a+b/(1+k/(p**2))-gamma*p
#    
#    
#
#epsilon = 0.1
#
#pe = [1]
#
#while(dp(pe[-1]) > epsilon):
#    pe.append(pe[-1]+dp(pe[-1]))
#    print(pe[-1])
#
#print(pe[-1], dp(pe[-1]))





























